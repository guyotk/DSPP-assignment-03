total_workers <- svyby(~count, ~industry, industrydesign, svytotal)
View(atus)
View(atus)
View(atus)
View(industry_worktime)
average_worktime <- svyby(~work_hrswkly, ~industry, industrydesign, svymean)
median_wage <- svyby(~wage, ~industry, industrydesign, svyquantile, quantiles=0.5, keep.var=FALSE)
total_workers <- svyby(~count, ~industry, industrydesign, svytotal, deff=TRUE)
average_worktime <- svyby(~work_hrswkly + ~wage, ~industry, industrydesign, svymean, unwtd.count)
average_worktime <- svyby(~work_hrswkly + ~wage, ~industry, industrydesign, svymean, na.rm.all=TRUE, unwtd.count)
average_worktime <- svyby(~work_hrswkly+~wage, ~industry, industrydesign, svymean)
View(average_worktime)
View(average_worktime)
average_worktime <- svyby(~work_hrswkly+~wage, ~industry, industrydesign, svymean)
totalworkers <- svyby(~count,~industry, industrydesign,svytotal)
industrydesign <- svydesign(id = ~1,
probs = NULL,
strata  = NULL,
weights = industry_worktime$WT06,
data = industry_worktime)
average_worktime <- svyby(~work_hrswkly+~wage, ~industry, industrydesign, svymean)
totalworkers <- svyby(~count, ~industry, industrydesign,svytotal)
View(totalworkers)
View(totalworkers)
average_worktime <- svyby(~work_hrswkly+~wage, ~industry, industrydesign, svymean, unwtd.count)
average_worktime <- svyby(~work_hrswkly+~wage, ~industry, industrydesign, svymean, unwtd.count, keep.var=FALSE)
average_worktime <- svyby(~work_hrswkly+~wage, ~industry, industrydesign, svymean, unwtd.count)
# Weight will give us total person days. Divide by 365 to get total people.
totalworkers <- svyby(~count, ~industry, industrydesign, svytotal, unwtd.count())
totalworkers <- mutate(count = count/365)
average_worktime <- svyby(~work_hrswkly+~wage, ~industry, industrydesign, svymean, unwtd.count)
# Weight will give us total person days. Divide by 365 to get total people.
totalworkers <- svyby(~count, ~industry, industrydesign, svytotal, unwtd.count())
totalworkers <- mutate(totalworkers, count = count/365)
average_worktime <- svyby(~work_hrswkly+~wage, ~industry, industrydesign, svymean, unwtd.count)
# Weight will give us total person days. Divide by 365 to get total people.
totalworkers <- svyby(~count, ~industry, industrydesign, svytotal)
totalworkers <- mutate(totalworkers, count = count/365)
average_worktime <- svyby(~work_hrswkly+~wage, ~industry, industrydesign, svymean)
# Weight will give us total person days. Divide by 365 to get total people.
totalworkers <- svyby(~count, ~industry, industrydesign, svytotal)
totalworkers <- mutate(totalworkers, count = count/365)
average_worktime <- svyby(~work_hrswkly+wage, ~industry, industrydesign, svymean, unwtd.count, keep.var=FALSE)
average_worktime <- svyby(~work_hrswkly+wage, ~industry, industrydesign, svymean, unwtd.count, keep.var=FALSE, na.rm.all=TRUE)
average_worktime <- svyby(~work_hrswkly+wage,~industry, industrydesign, svymean, unwtd.count, keep.var=FALSE, na.rm.all=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(survey)
atus <- read_csv("atus_00018.csv")
atus <- filter(atus, YEAR > 2013)
industries <- read_csv("industries.csv")
atus <- left_join(atus, industries, by="IND2")
atus$UHRSWORKT[atus$UHRSWORKT == 9995] <- 9999
atus <- atus %>%
mutate(EARNWEEK = na_if(EARNWEEK, 99999.99)) %>%
mutate(UHRSWORKT = na_if(UHRSWORKT, 9999)) %>%
mutate(wage = EARNWEEK/UHRSWORKT)
atus <- atus %>%
mutate(work_hrswkly = BLS_WORK_WORKING*7/60)
?weighted.mean
?summarize
industry_worktime <- atus %>%
filter(!is.na(wage) & !is.na(industry) & UHRSWORKT>0 & EARNWEEK>0) %>%
select(YEAR, WT06, industry, wage, work_hrswkly) %>%
groupby(industry) %>%
summarize(avgwage = weighted.mean(wage, WT06, na.rm=TRUE), avghrs = weightedweighted.mean(work_hrswkly, WT06, na.rm=TRUE), n=n())
industry_worktime <- atus %>%
filter(!is.na(wage) & !is.na(industry) & UHRSWORKT>0 & EARNWEEK>0) %>%
select(YEAR, WT06, industry, wage, work_hrswkly) %>%
group_by(industry) %>%
summarize(avgwage = weighted.mean(wage, WT06, na.rm=TRUE), avghrs = weightedweighted.mean(work_hrswkly, WT06, na.rm=TRUE), n=n())
industry_worktime <- atus %>%
filter(!is.na(wage) & !is.na(industry) & UHRSWORKT>0 & EARNWEEK>0) %>%
select(YEAR, WT06, industry, wage, work_hrswkly) %>%
group_by(industry) %>%
summarize(avgwage = weighted.mean(wage, WT06, na.rm=TRUE), avghrs = weighted.mean(work_hrswkly, WT06, na.rm=TRUE), n=n())
View(industry_worktime)
View(industry_worktime)
industry_worktime <- atus %>%
filter(!is.na(wage) & !is.na(industry) & UHRSWORKT>0 & EARNWEEK>0) %>%
select(YEAR, WT06, industry, wage, work_hrswkly) %>%
group_by(industry) %>%
summarize(avgwage = weighted.mean(wage, WT06, na.rm=TRUE), medwage = weighted.median(wage, WT06, na.rm=TRUE), avghrs = weighted.mean(work_hrswkly, WT06, na.rm=TRUE), n=n())
?ggplot
industry_worktime <- atus %>%
filter(!is.na(wage) & !is.na(industry) & UHRSWORKT>0 & EARNWEEK>0) %>%
select(YEAR, WT06, industry, wage, work_hrswkly) %>%
group_by(industry) %>%
summarize(avgwage = weighted.mean(wage, WT06, na.rm=TRUE), avghrs = weighted.mean(work_hrswkly, WT06, na.rm=TRUE), n=n(), fraction_female = weighted.mean(female, WT06, na.rm=TRUE))
mutate(atus, female = SEX-1)
atus <- mutate(female = SEX-1)
atus <- mutate(atus, female = SEX-1)
industry_worktime <- atus %>%
filter(!is.na(wage) & !is.na(industry) & UHRSWORKT>0 & EARNWEEK>0) %>%
select(YEAR, WT06, industry, wage, work_hrswkly) %>%
group_by(industry) %>%
summarize(avgwage = weighted.mean(wage, WT06, na.rm=TRUE), avghrs = weighted.mean(work_hrswkly, WT06, na.rm=TRUE), n=n(), fraction_female = weighted.mean(female, WT06, na.rm=TRUE))
industry_worktime <- atus %>%
filter(!is.na(wage) & !is.na(industry) & UHRSWORKT>0 & EARNWEEK>0) %>%
select(YEAR, WT06, industry, wage, work_hrswkly, female) %>%
group_by(industry) %>%
summarize(avgwage = weighted.mean(wage, WT06, na.rm=TRUE), avghrs = weighted.mean(work_hrswkly, WT06, na.rm=TRUE), n=n(), fraction_female = weighted.mean(female, WT06, na.rm=TRUE))
ggplot(industry_worktime) +
geom_point(mapping = aes(x = avghrs, y = avgwage, color = fraction_female)
ggplot(industry_worktime) +
geom_point(mapping = aes(x = avghrs, y = avgwage, color = fraction_female))
ggplot(industry_worktime) +
geom_point(mapping = aes(x = avghrs, y = avgwage, color = fraction_female))
View(industry_worktime)
ggplot(industry_worktime, mapping = aes(x = avgwage, y = avghrs)) +
geom_point(color = fraction_female, size = n)
ggplot(industry_worktime, mapping = aes(x = avgwage, y = avghrs)) +
geom_point(mapping = aes(color = fraction_female, size = n))
?scale_colour_gradientn
ggplot(industry_worktime, mapping = aes(x = avgwage, y = avghrs)) +
geom_point(mapping = aes(color = fraction_female, size = n)) +
scale_colour_gradient(low= "#00ABFD", high="#FF6C90")
?ggplot
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(survey)
atus <- read_csv("atus_00018.csv")
atus <- filter(atus, YEAR > 2013)
industries <- read_csv("industries.csv")
atus <- left_join(atus, industries, by="IND2")
atus$UHRSWORKT[atus$UHRSWORKT == 9995] <- 9999
atus <- atus %>%
mutate(EARNWEEK = na_if(EARNWEEK, 99999.99)) %>%
mutate(UHRSWORKT = na_if(UHRSWORKT, 9999)) %>%
mutate(wage = EARNWEEK/UHRSWORKT) %>%
mutate(work_hrswkly = BLS_WORK_WORKING*7/60) %>%
mutate(female = SEX-1)
industry_worktime <- atus %>%
filter(!is.na(wage) & !is.na(industry) &
UHRSWORKT>0 & EARNWEEK>0) %>%
select(YEAR, WT06, industry, wage,
work_hrswkly, female) %>%
group_by(industry) %>%
summarize(avgwage = weighted.mean(wage, WT06, na.rm=TRUE),
avghrs = weighted.mean(work_hrswkly, WT06, na.rm=TRUE),
n=n(),
fraction_female = weighted.mean(female, WT06, na.rm=TRUE))
ggplot(industry_worktime, mapping = aes(x = avgwage, y = avghrs)) +
geom_point(mapping = aes(color = fraction_female, size = n)) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
labs(color = "Percent of workers in industry who are women") +
labs(x = "Average hourly wage") +
labs(y = "Average weekly hours worked") +
labs(title = "Average hourly wage and average weekly hours worked by industry") +
labs(size = "Size of industry in sample")
ggplot(industry_worktime, mapping = aes(x = avgwage, y = avghrs)) +
geom_point(mapping = aes(color = fraction_female, size = n)) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
labs(color = "% women") +
labs(x = "Average hourly wage") +
labs(y = "Average weekly hours worked") +
labs(title = "Average hourly wage and average weekly hours worked by industry") +
labs(size = "Size of industry")
?ggtheme
ggplot(industry_worktime, mapping = aes(x = avgwage, y = avghrs)) +
geom_point(mapping = aes(color = fraction_female, size = n)) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
labs(color = "% women") +
labs(x = "Average hourly wage") +
labs(y = "Average weekly hours worked") +
labs(title = "Average hourly wage and average weekly hours worked by industry") +
labs(size = "Size of industry") +
theme_minimal()
?fig.align
??fig.align
ggplot(industry_worktime, mapping = aes(x = avgwage, y = avghrs)) +
geom_point(mapping = aes(color = fraction_female, size = n)) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
labs(color = "% women") +
labs(x = "Average hourly wage") +
labs(y = "Average weekly hours worked") +
labs(title = "Average hourly wage and average weekly hours worked by industry") +
labs(size = "Size of industry") +
theme_minimal() +
fig.align
ggplot(industry_worktime, mapping = aes(x = avgwage, y = avghrs)) +
geom_point(mapping = aes(color = fraction_female, size = n)) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
labs(color = "% women") +
labs(x = "Average hourly wage") +
labs(y = "Average weekly hours worked") +
labs(title = "Average hourly wage and average weekly hours worked by industry") +
labs(size = "Size of industry") +
theme_minimal() +
fig.align
ggplot(industry_worktime, mapping = aes(x = avgwage, y = avghrs)) +
geom_point(mapping = aes(color = fraction_female, size = n)) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
labs(color = "% women") +
labs(x = "Average hourly wage") +
labs(y = "Average weekly hours worked") +
labs(title = "Average hourly wage and average weekly hours worked by industry") +
labs(size = "Size of industry") +
theme_minimal() +
fig.align
ggplot(industry_worktime, mapping = aes(x = avgwage, y = avghrs)) +
geom_point(mapping = aes(color = fraction_female, size = n)) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
labs(color = "% women") +
labs(x = "Average hourly wage") +
labs(y = "Average weekly hours worked") +
labs(title = "Average hourly wage and average weekly hours worked by industry") +
labs(size = "Size of industry") +
theme_minimal() +
fig.align
ggplot(industry_worktime, mapping = aes(x = avgwage, y = avghrs)) +
geom_point(mapping = aes(color = fraction_female, size = n)) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
labs(color = "% women") +
labs(x = "Average hourly wage") +
labs(y = "Average weekly hours worked") +
labs(title = "Average hourly wage and average weekly hours worked by industry") +
labs(size = "Size of industry") +
theme_minimal() +
fig.align
summarise(atus, KIDUND18)
?summarise
?summary
summary(atus$KIDUND18)
table(ATUS, EMPSTAT)
table(atus, EMPSTAT)
table(atus$EMPSTAT)
table(atus$SPEMPSTAT)
summary(atus$UHRSWORKT)
parents <- atus %>%
select(WT06 SEX MARST EMPSTAT SPEMPSTAT KIDUND18
BLS_CAREHH_KID BLS_HHACT_HWORK BLS_HHACT_FOOD) %>%
filter(KIDUND18 > 0) %>%
mutate(SPEMPSTAT = na_if(SPEMPSTAT, 96, 97, 98)) %>%
mutate(couple_type = ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 1:2, "Dual earners",
ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 3:6, "Single earner",
ifelse(EMPSTAT %in% 4:99 & SPEMPSTAT %in% 1:2,
"Stay-at-home partner",
ifelse(SPEMPSTAT==99, "Single parent", "No workers"))))
View(atus)
View(atus)
?select
summary(atus$BLS_HHACT_HWORK)
parents <- atus %>%
select(WT06 SEX MARST EMPSTAT SPEMPSTAT KIDUND18
BLS_CAREHH_KID BLS_HHACT_HWORK BLS_HHACT_FOOD)
parents <- atus %>%
select(WT06 SEX MARST EMPSTAT SPEMPSTAT KIDUND18
BLS_CAREHH_KID BLS_HHACT_HWORK BLS_HHACT_FOOD)
parents <- atus %>%
select(WT06, SEX, MARST, EMPSTAT, SPEMPSTAT, KIDUND18,
BLS_CAREHH_KID, BLS_HHACT_HWORK, BLS_HHACT_FOOD) %>%
filter(KIDUND18 > 0) %>%
mutate(SPEMPSTAT = na_if(SPEMPSTAT, 96, 97, 98)) %>%
mutate(couple_type = ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 1:2, "Dual earners",
ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 3:6, "Single earner",
ifelse(EMPSTAT %in% 4:99 & SPEMPSTAT %in% 1:2,
"Stay-at-home partner",
ifelse(SPEMPSTAT==99, "Single parent",
"No workers")))))
parents <- atus %>%
select(WT06, SEX, MARST, EMPSTAT, SPEMPSTAT, KIDUND18,
BLS_CAREHH_KID, BLS_HHACT_HWORK, BLS_HHACT_FOOD) %>%
filter(KIDUND18 > 0) %>%
mutate(couple_type = ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 1:2, "Dual earners",
ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 3:6, "Single earner",
ifelse(EMPSTAT %in% 4:99 & SPEMPSTAT %in% 1:2,
"Stay-at-home partner",
ifelse(SPEMPSTAT==99, "Single parent",
"No workers or unknown")))))
summary(parents$couple_type)
View(parents)
View(parents)
parents <- parents %>%
mutate(female = SEX - 1)
parents <- parents %>%
group_by(female, couple_type) %>%
summarise(childcare = weighted.mean(BLS_CAREHH_KID, WT06, na.rm=TRUE),
housework = weighted.mean(BLS_HHACT_HWORK, WT06, na.rm=TRUE),
cooking = weighted.mean(BLS_HHACT_FOOD, WT06, na.rm=TRUE),
n=n())
parents <- atus %>%
select(WT06, SEX, MARST, EMPSTAT, SPEMPSTAT, KIDUND18,
BLS_CAREHH_KID, BLS_HHACT_HWORK, BLS_HHACT_FOOD) %>%
filter(KIDUND18 > 0) %>%
mutate(female = SEX - 1) %>%
mutate(couple_type = ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 1:2, "Dual earners",
ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 3:6, "Single earner",
ifelse(EMPSTAT %in% 3:5 & SPEMPSTAT %in% 1:2,
"Stay-at-home partner",
ifelse(SPEMPSTAT==99, "Single parent",
ifelse(EMPSTAT %in% 3:5 & SPEMPSTAT %in% 3:6,
"No workers or unknown"))))))
parents <- atus %>%
select(WT06, SEX, MARST, EMPSTAT, SPEMPSTAT, KIDUND18,
BLS_CAREHH_KID, BLS_HHACT_HWORK, BLS_HHACT_FOOD) %>%
filter(KIDUND18 > 0) %>%
mutate(female = SEX - 1) %>%
mutate(couple_type = ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 1:2, "Dual earners",
ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 3:6, "Single earner",
ifelse(EMPSTAT %in% 3:5 & SPEMPSTAT %in% 1:2,
"Stay-at-home partner",
ifelse(SPEMPSTAT==99, "Single parent",
ifelse(EMPSTAT %in% 3:5 & SPEMPSTAT %in% 3:6, "No workers",
"Unknown"))))))
parents <- parents %>%
group_by(female, couple_type) %>%
summarise(childcare = weighted.mean(BLS_CAREHH_KID, WT06, na.rm=TRUE),
housework = weighted.mean(BLS_HHACT_HWORK, WT06, na.rm=TRUE),
cooking = weighted.mean(BLS_HHACT_FOOD, WT06, na.rm=TRUE),
n=n())
View(parents)
View(parents)
parents <- parents %>%
pivot_longer(cols = c(-female, -couple_type), names_to = "activity", values_to = "dailyhrs")
parents <- atus %>%
select(WT06, SEX, MARST, EMPSTAT, SPEMPSTAT, KIDUND18,
BLS_CAREHH_KID, BLS_HHACT_HWORK, BLS_HHACT_FOOD) %>%
filter(KIDUND18 > 0) %>%
mutate(female = SEX - 1) %>%
mutate(couple_type = ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 1:2, "Dual earners",
ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 3:6, "Single earner",
ifelse(EMPSTAT %in% 3:5 & SPEMPSTAT %in% 1:2,
"Stay-at-home partner",
ifelse(SPEMPSTAT==99, "Single parent",
ifelse(EMPSTAT %in% 3:5 & SPEMPSTAT %in% 3:6, "No workers",
"Unknown"))))))
parents <- parents %>%
group_by(female, couple_type) %>%
summarise(childcare = weighted.mean(BLS_CAREHH_KID, WT06, na.rm=TRUE),
housework = weighted.mean(BLS_HHACT_HWORK, WT06, na.rm=TRUE),
cooking = weighted.mean(BLS_HHACT_FOOD, WT06, na.rm=TRUE))
parents <- parents %>%
pivot_longer(cols = c(-female, -couple_type), names_to = "activity", values_to = "dailyhrs")
ggplot(parents, mapping = aes(x = female, y = avghrs)) +
geom_col(position = 'stack') +
facet_grid(~ couple_type)
labs(x = "Gender") +
labs(y = "Average daily hours") +
labs(title = "Average hours in childcare and housework among parents") +
theme_minimal()
ggplot(parents, mapping = aes(x = female, y = activity)) +
geom_col(position = 'stack') +
facet_grid(~ couple_type)
labs(x = "Gender") +
labs(y = "Average daily hours") +
labs(title = "Average hours in childcare and housework among parents") +
theme_minimal()
ggplot(parents, mapping = aes(x = female, y = activity)) +
geom_col(position = 'stack') +
facet_grid(~ couple_type)
labs(x = "Gender") +
labs(y = "Average daily hours") +
labs(title = "Average hours in childcare and housework among parents") +
theme_minimal()
ggplot(parents, mapping = aes(x = female, y = dailyhrs)) +
geom_col(position = 'stack') +
facet_grid(~ couple_type)
labs(x = "Gender") +
labs(y = "Average daily hours") +
labs(title = "Average hours in childcare and housework among parents") +
theme_minimal()
ggplot(parents, mapping = aes(x = female, y = dailyhrs)) +
geom_col(position = 'stack') +
facet_grid(~ couple_type)
labs(x = "Gender") +
labs(y = "Average daily hours") +
labs(title = "Average hours in childcare and housework among parents") +
theme_minimal()
ggplot(parents, mapping = aes(x = female, y = dailyhrs)) +
geom_col(position = 'stack') +
facet_grid(~ couple_type) +
labs(x = "Gender") +
labs(y = "Average daily hours") +
labs(title = "Average hours in childcare and housework among parents") +
theme_minimal()
parents <- atus %>%
select(WT06, SEX, MARST, EMPSTAT, SPEMPSTAT, KIDUND18, BLS_CAREHH_KID) %>%
filter(KIDUND18 > 0) %>%
mutate(female = SEX - 1) %>%
mutate(couple_type = ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 1:2, "Dual earners",
ifelse(EMPSTAT %in% 1:2 & SPEMPSTAT %in% 3:6, "Single earner",
ifelse(EMPSTAT %in% 3:5 & SPEMPSTAT %in% 1:2,
"Stay-at-home partner",
ifelse(SPEMPSTAT==99, "Single parent",
ifelse(EMPSTAT %in% 3:5 & SPEMPSTAT %in% 3:6, "No workers",
"Unknown"))))))
parents <- parents %>%
group_by(female, couple_type) %>%
summarise(childcare = weighted.mean(BLS_CAREHH_KID, WT06, na.rm=TRUE))
ggplot(parents, mapping = aes(x = female, y = childcare)) +
geom_col() +
facet_grid(~ couple_type) +
labs(x = "Gender") +
labs(y = "Average daily hours") +
labs(title = "Average hours in childcare and housework among parents") +
theme_minimal()
ggplot(parents, mapping = aes(x = female, y = childcare)) +
geom_col(mapping = aes(fill = female)) +
facet_grid(~ couple_type) +
labs(x = "Gender") +
labs(y = "Average daily hours") +
labs(title = "Average hours in childcare and housework among parents") +
theme_minimal()
ggplot(parents, mapping = aes(x = female, y = childcare)) +
geom_col(mapping = aes(color = female)) +
facet_grid(~ couple_type) +
labs(x = "Gender") +
labs(y = "Average daily hours") +
labs(title = "Average hours in childcare and housework among parents") +
theme_minimal()
ggplot(parents, mapping = aes(x = female, y = childcare)) +
geom_col(position = 'stacked', mapping = aes(fill = female)) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
facet_grid(~ couple_type) +
labs(x = "Gender") +
labs(y = "Average daily hours") +
labs(title = "Average hours in childcare and housework among parents") +
theme_minimal()
ggplot(parents, mapping = aes(x = female, y = childcare)) +
geom_col(mapping = aes(fill = female)) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
facet_grid(~ couple_type) +
labs(x = "Gender") +
labs(y = "Average daily hours") +
labs(title = "Average hours in childcare and housework among parents") +
theme_minimal()
ggplot(parents, mapping = aes(x = female, y = childcare)) +
geom_col(mapping = aes(fill = factor(female))) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
facet_grid(~ couple_type) +
labs(x = "Gender") +
labs(y = "Average daily hours") +
labs(title = "Average hours in childcare and housework among parents") +
theme_minimal()
parents <- parents %>%
filter(!couple_type == "No workers")
parents <- parents %>%
filter(!couple_type == "No workers") %>%
filter(!couple_type == "Unknown")
ggplot(parents, mapping = aes(x = female, y = childcare)) +
geom_col(mapping = aes(fill = factor(female))) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
facet_grid(~ couple_type) +
labs(x = "Gender") +
labs(y = "Average daily hours") +
labs(title = "Average hours in childcare and housework among parents") +
theme_minimal()
ggplot(parents, mapping = aes(x = female, y = childcare)) +
geom_col(mapping = aes(fill = factor(female))) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
facet_grid(~ couple_type) +
labs(x = "Gender") +
labs(y = "Average daily minutes") +
labs(title = "Average time in childcare and housework among parents") +
theme_minimal()
ggplot(parents, mapping = aes(x = female, y = childcare)) +
geom_col(mapping = aes(fill = factor(female))) +
scale_color_gradient(low="#00ABFD", high="#FF6C90") +
facet_grid(~ couple_type) +
labs(y = "Average daily minutes") +
labs(title = "Average time in childcare and housework among parents") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(parents, mapping = aes(x = female, y = childcare)) +
geom_col(mapping = aes(fill = factor(female))) +
scale_fill_brewer(palette="Set1") +
facet_grid(~ couple_type) +
labs(y = "Average daily minutes") +
labs(title = "Average time in childcare and housework among parents") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(parents, mapping = aes(x = female, y = childcare)) +
geom_col(mapping = aes(fill = factor(female))) +
scale_fill_brewer(palette="Set2") +
facet_grid(~ couple_type) +
labs(y = "Average daily minutes") +
labs(title = "Average time in childcare and housework among parents") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(parents, mapping = aes(x = female, y = childcare)) +
geom_col(mapping = aes(fill = factor(female))) +
scale_fill_brewer(palette="Set2") +
facet_grid(~ couple_type) +
labs(y = "Average daily minutes",
title = "Average time in childcare and housework among parents" ,
fill = "Gender") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
parents <- parents %>%
reshape(gender = ifelse(SEX==1, "female", "male"))
parents <- parents %>%
reshape(gender = ifelse(female==1, "female", "male"))
ggplot(parents, mapping = aes(x = female, y = childcare)) +
geom_col(mapping = aes(fill = factor(female))) +
scale_fill_brewer(palette="Set2") +
facet_grid(~ couple_type) +
labs(y = "Average daily minutes",
title = "Average time in childcare and housework among parents" ,
fill = "Gender (1 = female)") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
